name: ci

on:
  push

jobs:
  # gradle build & test
  java:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          # Build and run unit tests
          java -version
          cd app
          ../gradlew --no-daemon clean test installDist distZip

      - run: |
          # Start integration test environment
          docker version
          cd docker
          docker compose up --detach
          sleep 5
          cd ..

          # Run application under test
          cd app
          export APP_OPTS="\
              -Xmx300M \
              -Djavax.net.ssl.trustStore=../docker/certs/truststore.jks \
              -Djavax.net.ssl.trustStorePassword=changeit"
          build/install/app/bin/app \
              --config assets/config/config.yaml \
              --config src/test/resources/integtest/config.yaml \
              --scopes assets/scopes/scopes.yaml \
              --translation assets/i18n/translations.yaml > /dev/null &

          # Run integration tests
          ../gradlew --no-daemon cleanIntegTest integTest
          cd ..

          # Stop application under test
          kill %%

          # Stop integration test environment
          cd docker
          docker compose down --volumes

      - uses: actions/upload-artifact@v3
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        with:
          name: gradle-install
          path: app/build/install/app/

      - uses: actions/upload-artifact@v3
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        with:
          name: assets
          path: app/assets/

      - uses: actions/upload-artifact@v3
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        with:
          name: native-image-configs
          path: app/native-image

      - uses: actions/upload-artifact@v3
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        with:
          name: gradle-dist
          path: app/build/distributions/app.zip

  # build native-image for linux/amd64
  native-image-linux-amd64:
    #if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    needs: java
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: gradle-install
          path: gradle-install

      - uses: actions/download-artifact@v3
        with:
          name: native-image-configs
          path: native-image-configs

      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          cd native-image-configs
          native-image \
              --allow-incomplete-classpath \
              --no-fallback \
              --static \
              --libc=glibc \
              --class-path './config-classpath/:../gradle-install/lib/*' \
              com.github.lbarnkow.minchir.App \
              minchir-linux-amd64
          ./minchir-linux-amd64 --help

      - uses: actions/upload-artifact@v3
        with:
          name: native-image-linux-amd64
          path: native-image-configs/minchir-linux-amd64

  # build native-image for linux/arm64
  native-image-linux-arm64:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    needs: java
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: gradle-install
          path: gradle-install

      - uses: actions/download-artifact@v3
        with:
          name: native-image-configs
          path: native-image-configs

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.arm.ci
          platforms: linux/arm64
          load: true
          push: false
          tags: lbarnkow/minchir-temp:${{ github.sha }}

      - run: |
          mkdir output
          CONTAINER=$(docker container create lbarnkow/minchir-temp:$GITHUB_SHA sh)
          docker container cp $CONTAINER:/minchir-linux-arm64 output/
          docker container rm $CONTAINER
          file output/minchir-linux-arm64

      - uses: actions/upload-artifact@v3
        with:
          name: native-image-linux-arm64
          path: output/minchir-linux-arm64

  # run integration tests on native-image
  native-image-linux-amd64-test:
    #if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    needs: native-image-linux-amd64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v3
        with:
          name: native-image-linux-amd64
          path: app/native-image/

      - run: |
          # Start integration test environment
          docker version
          cd docker
          docker compose up --detach
          sleep 5
          cd ..

          # Run application under test
          cd app
          chmod +x native-image/minchir-linux-amd64
          native-image/minchir-linux-amd64 \
              --config assets/config/config.yaml \
              --config src/test/resources/integtest/config.yaml \
              --scopes assets/scopes/scopes.yaml \
              --translation assets/i18n/translations.yaml \
              -Djavax.net.ssl.trustStore=../docker/certs/truststore.jks \
              -Djavax.net.ssl.trustStorePassword=changeit > /dev/null &

          # Run integration tests
          ../gradlew --no-daemon cleanIntegTest integTest
          cd ..

          # Stop application under test
          kill %%

          # Stop integration test environment
          cd docker
          docker compose down --volumes

  # build and push docker images
  docker:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    needs: [java, native-image-linux-amd64, native-image-linux-arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: native-image-linux-amd64
          path: app/native-image/

      - uses: actions/download-artifact@v3
        with:
          name: native-image-linux-arm64
          path: app/native-image/

      - uses: actions/download-artifact@v3
        with:
          name: assets
          path: app/native-image/assets

      - run: |
          cd app/native-image
          chmod +x minchir-linux-*
          ls -la
          tree

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - uses: docker/metadata-action@v4
        id: meta
        with:
          flavor: |
            latest=false
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=edge,enable={{ is_default_branch }}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v3
        with:
          context: app/native-image/
          file: app/native-image/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # publish release
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: native-image-linux-amd64

      - uses: actions/download-artifact@v3
        with:
          name: native-image-linux-arm64

      - uses: actions/download-artifact@v3
        with:
          name: gradle-install
          path: gradle-install

      - uses: actions/download-artifact@v3
        with:
          name: assets
          path: assets

      - run: |
          set -x
          cp -a assets gradle-install/
          zip -r assets.zip assets/
          cd gradle-install/bin
          mv app minchir-$GITHUB_REF_NAME
          mv app.bat minchir-$GITHUB_REF_NAME.bar
          cd ../..
          mv gradle-install minchir-$GITHUB_REF_NAME
          zip -r minchir-$GITHUB_REF_NAME.zip minchir-$GITHUB_REF_NAME/
          ls -lah
          tree

      - uses: softprops/action-gh-release@v0.1.14
        with:
          fail_on_unmatched_files: true
          prerelease: ${{ contains(github.ref, '-') }}
          generate_release_notes: true
          files: |
            minchir-${{ github.ref_name }}.zip
            assets.zip
            minchir-linux-arm64
            minchir-linux-amd64
